<?php
declare(strict_types=1);

use GuzzleHttp\Client;

require 'vendor/autoload.php';

include "GuzzleTranslateAPIWrapper.php";

class AzureTranslator extends GuzzleTranslateAPIWrapper {


    private function com_create_guid() 
    {
        return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),
            mt_rand( 0, 0xffff ),
            mt_rand( 0, 0x0fff ) | 0x4000,
            mt_rand( 0, 0x3fff ) | 0x8000,
            mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
        );
    }
  
  


   public function __construct($service)
   {
         parent::__construct($service);     
   } 

    // todo: break this into the three methods -- prepare_trans_request(), send_trans_request and get_sentences()
    public function prepare_request(string $text, string $source_lang, string $target_lang) : string
    {

  /* TODO:
    Handle "Content-Length" header

   'Content-length' =>  strlen($content),
   */
         try {

          $requestBody = [ [ 'Text' => $text, ] ];

          $content = json_encode($requestBody);

         /*
          * TODO: See header documentation for required header settings
          */

	 $query =  ['query' => [self::$qs_api_version => '3.0', 
                                self::$qs_source_lang => $srouce_lang,  // TODO: <-- Need to use generic values that work acorss all translators, doing a hasttable lookup if necessary.
                                self::$qs_target_lang => $target_lang,  // TODO: <-- Need to use generic values that work acorss all translators, doing a hasttable lookup if necessary.
                                self::$qs_text_type   => 'plain'
                               ] ]; 

	 $response = $this->client->request('POST', $this->base_uri, $query);

         $contents = $response->getBody()->getContents();

         $obj = json_decode($contents);
    
         return $obj; // TODO: Return an array of translated "sentences".
      
      } catch (RequestException $e) { // We get here if response code from REST server is > 400, like  404 response

         /* Check if a response was received */
         if ($e->hasResponse())
             
            $str = "Response Code is " . $e->getResponse()->getStatusCode();
         else 
             $str = "No respons from server.";

         throw new Exception("Guzzle RequestException. $str"); 
    }
   }

}
