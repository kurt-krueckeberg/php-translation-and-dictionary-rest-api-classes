ResultsIerator out for Behörde:
stdClass Object
(
    [type] => entry
    [headword] => Be·hör·de
    [pos] => noun
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <strong class="headword">Behörde</strong>
                    [target] => [government] <span class="target">[<span class="or"><acronym title="or">or</acronym></span> [local] council]</span> offices
                )

        )

)

stdClass Object
(
    [type] => entry
    [headword] => Behörde
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <strong class="headword">Behörde</strong>
                    [target] => authority
                )

        )

)

stdClass Object
(
    [type] => entry
    [headword] => EU-Be·hör·de
    [pos] => noun
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <strong class="headword">EU-Behörde</strong>
                    [target] => EU authority
                )

        )

)

stdClass Object
(
    [type] => entry
    [headword] => geldpolitische Behörde
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <strong class="headword">geldpolitische Behörde</strong>
                    [target] => monetary board
                )

        )

)

stdClass Object
(
    [type] => entry
    [headword] => monetäre Behörde
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <strong class="headword">monetäre Behörde</strong>
                    [target] => monetary board
                )

        )

)

==============
ResultsIerator out for beistehen:
stdClass Object
(
    [type] => entry
    [headword] => bei|ste·hen
    [pos] => intransitive verb
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <span class="grammatical_construction"><acronym title="jemandem">jdm</acronym> [gegen <acronym title="jemanden">jdn</acronym>/<acronym title="etwas">etw</acronym>] <strong class="tilde">beistehen
</strong> </span>
                    [target] => to stand by <acronym title="somebody">sb</acronym> [before <acronym title="somebody">sb</acronym>/<acronym title="something">sth</acronym>]
                )

            [1] => stdClass Object
                (
                    [source] => <span class="full_collocation"><acronym title="jemandem">jdm</acronym> helfend/tatkräftig <strong class="tilde">beistehen
</strong> </span>
                    [target] => to give <acronym title="somebody">sb</acronym> assistance/one&#39;s active support
                )

            [2] => stdClass Object
                (
                    [source] => <span class="grammatical_construction">einander [<span class="or"><acronym title="oder">o.</acronym></span> sich] <strong class="tilde">beistehen
</strong> </span>
                    [target] => to stand by each other
                )

        )

)

==============
ResultsIerator out for berühren:
stdClass Object
(
    [type] => entry
    [headword] => be·rüh·ren
    [pos] => reflexive verb
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <span class="grammatical_construction">sich <span class="case"><acronym title="accusative">acc</acronym></span> [in <acronym title="etwas">etw</acronym> <span class="case"><acronym title="dative">dat</acronym></span>] <strong class="tilde">berühren
</strong> </span>
                    [target] => to meet
                )

            [1] => stdClass Object
                (
                    [source] => <span class="grammatical_construction">sich <span class="case"><acronym title="accusative">acc</acronym></span> [in <acronym title="etwas">etw</acronym> <span class="case"><acronym title="dative">dat</acronym></span>] <strong class="tilde">berühren
</strong> </span>
                    [target] => to converge
                )

            [2] => stdClass Object
                (
                    [source] => <span class="example">in einigen Punkten <strong class="tilde">berühren</strong> wir uns</span>
                    [target] => we agree on a couple of points
                )

        )

)

==============
ResultsIerator out for ausrechnen:
stdClass Object
(
    [type] => entry
    [headword] => aus|rech·nen
    [pos] => reflexive verb
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <span class="grammatical_construction"><acronym title="etwas">etw</acronym> lässt sich <strong class="tilde">ausrechnen
</strong> </span>
                    [target] => <acronym title="something">sth</acronym> can be calculated
                )

            [1] => stdClass Object
                (
                    [source] => <span class="example">diese Gleichung lässt sich <strong class="tilde">ausrechnen
</strong> </span>
                    [target] => this equation can be solved
                )

            [2] => stdClass Object
                (
                    [source] => <span class="example">diese Gleichung lässt sich <strong class="tilde">ausrechnen
</strong> </span> <span class="sense">(sich vorstellen können)</span>
                    [target] => <acronym title="something">sth</acronym> can be imagined
                )

            [3] => stdClass Object
                (
                    [source] => <span class="example">es lässt sich [leicht] <strong class="tilde">ausrechnen</strong>, dass ...</span>
                    [target] => you/I etc. can [easily] imagine that ...
                )

        )

)

==============
ResultsIerator out for satthaben:
stdClass Object
(
    [type] => entry
    [headword] => satt|ha·ben
    [pos] => transitive verb
    [definitions] => Array
        (
            [0] => stdClass Object
                (
                    [source] => <span class="grammatical_construction"><acronym title="jemanden">jdn</acronym>/<acronym title="etwas">etw</acronym> <strong class="tilde">satthaben
</strong> </span>
                    [target] => to have had enough of <acronym title="somebody">sb</acronym>/<acronym title="something">sth</acronym>
                )

            [1] => stdClass Object
                (
                    [source] => <span class="grammatical_construction"><acronym title="jemanden">jdn</acronym>/<acronym title="etwas">etw</acronym> <strong class="tilde">satthaben
</strong> </span>
                    [target] => to be fed up with <acronym title="somebody">sb</acronym>/<acronym title="something">sth</acronym> <span class="style"><acronym title="informal">inf</acronym></span>
                )

            [2] => stdClass Object
                (
                    [source] => <span class="full_collocation"><acronym title="jemanden">jdn</acronym>/<acronym title="etwas">etw</acronym> gründlich <strong class="tilde">satthaben
</strong> </span>
                    [target] => to be thoroughly fed up with <acronym title="somebody">sb</acronym>/<acronym title="something">sth</acronym> <span class="style"><acronym title="informal">inf</acronym></span>
                )

            [3] => stdClass Object
                (
                    [source] => <span class="full_collocation"><acronym title="jemanden">jdn</acronym>/<acronym title="etwas">etw</acronym> gründlich <strong class="tilde">satthaben
</strong> </span>
                    [target] => to be fed up to the back teeth with <acronym title="somebody">sb</acronym>/<acronym title="something">sth</acronym> <span class="region"><acronym title="British English" class="Brit">Brit</acronym></span> <span class="style"><acronym title="informal">inf</acronym></span>
                )

        )

)

==============
